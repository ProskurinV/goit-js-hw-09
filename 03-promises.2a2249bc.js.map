{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,QACtBD,SAASC,cAAc,uBADrC,MAEMC,EAAOF,SAASC,cAAc,sBAC9BE,EAASH,SAASC,cAAc,wBAC1BD,SAASC,cAAc,yBAE/BG,iBAAiB,UAIrB,SAAuBC,EAAUC,GAI/B,OAHAA,EAAQC,SACRL,EAAOK,SACPJ,EAASI,SACF,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEK,SAAAT,EAAUU,MAAAT,IAEpBI,EAAO,CAAEI,SAAAT,EAAUU,MAAAT,GAAQ,GAE5BA,EAAM,IAERU,MAAK,EAACF,SAAEA,EAAUC,MAAAE,MACjBC,EAAApB,GAASqB,OAAOC,QAAQ,uBAAqBN,QAAiBG,MAAU,IAEzEI,OAAM,EAACP,SAAEA,EAAUC,MAAAO,MAClBJ,EAAApB,GAASqB,OAAOI,QAAQ,sBAAoBT,QAAiBQ,MAAU,G,IAtB/BE,IAC5CA,EAAMC,gBAAgB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst btn = document.querySelector('button[type=\"submit\"]');\n\nbtn.addEventListener('submit', createPromise, event => {\n  event.preventDefault();\n});\n\nfunction createPromise(position, delay) {\n  delay = Number();\n  step = Number();\n  amount = Number();\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n// });\n\n// ===============================\n\n// function createPromise(position, delay) {\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n\n// btnCreatePromise.addEventListener('click', e => {\n//   e.preventDefault();\n//   let firstDelay = Number(delay.value);\n//   let delayStep = Number(step.value);\n//   for (let i = 0; i < amount.value; i++) {\n//     createPromise(1 + i, firstDelay + i * delayStep)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//   }\n// });\n"],"names":["$eWCmQ","parcelRequire","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","addEventListener","position1","delay1","Number","Promise","resolve","reject","setTimeout","Math","random","position","delay","then","delay2","$parcel$interopDefault","Notify","success","catch","delay3","failure","event","preventDefault"],"version":3,"file":"03-promises.2a2249bc.js.map"}